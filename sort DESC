void dbWorker::checkResourses(QComboBox *combobx, QAbstractItemDelegate *deleg, QTableView *table,QString usr,  QString driverName, QString hostName, int port, QString dbName, QString pwd, QString userName, QString connectOptions)
{
    QSqlTableModel *model1;
    QSqlQueryModel *setquery = new QSqlQueryModel;

    QString dbname = combobx->currentText();
    QModelIndex myIndex;
    db = QSqlDatabase::addDatabase                  (driverName);
    db.setHostName                                  (hostName);
    db.setPort                                      (port);
    db.setDatabaseName                              (dbName);
    db.setPassword                                  (pwd);
    db.setUserName                                  (userName);
    db.setConnectOptions                            (connectOptions);
    db.open();

//    model1 =new QSqlTableModel      (0, db);
//    model1->setEditStrategy                         (QSqlTableModel::OnFieldChange);

//    model1->setTable                                ("chk.\"Table_state\"");
//    model1->setHeaderData                           (0,Qt::Horizontal, "Описание");
//    model1->setHeaderData                           (1,Qt::Horizontal, "Имя схемы");
//    model1->setHeaderData                           (2,Qt::Horizontal, "Наименование таблицы");
//    model1->setHeaderData                           (3,Qt::Horizontal, "Событие вставки");
//    model1->setHeaderData                           (4,Qt::Horizontal, "Событие обновления");
//    model1->setHeaderData                           (5,Qt::Horizontal, "Событие удаления");
//    model1->select                                  ();

//    table->setModel                            (model1);

    setquery->setQuery("SELECT description AS \"Описание\", schemaname AS \"Имя схемы\", tablename AS \"Таблица\", Insert AS \"Событие вставки\", "
                       "update AS \"Событие обновления\", delete AS \"Событие удаления\", hard_control from chk.\"Table_state\" ORDER BY hard_control DESC");
    table->setModel(setquery);
    table->setModel(setquery);

    table->setItemDelegateForColumn            (3, deleg);
    table->setItemDelegateForColumn            (4, deleg);
    table->setItemDelegateForColumn            (5, deleg);
    table->setFocus();
    table->setColumnHidden(6, true);


   //фикс видимости чекбоксов
    for(int row=0; row < setquery->rowCount(); ++row)
    {
        table->openPersistentEditor        (setquery->index(row, 3));
        table->openPersistentEditor        (setquery->index(row, 4));
        table->openPersistentEditor        (setquery->index(row, 5));
    }

    if(db.isOpen()) ///< Проверяем события успешного подключения к БД
       {
          qDebug() << "[Information] Подключение к БД... \n[Success] Успешное подключение. Пользователь: " + usr + ". Подключение к БД: " + dbname + " IP: "+ hostName;
       }else{
          QMessageBox::critical(0, "Подключение к БД " + dbname, "Ошибка! Пожалуйста, проверьте правильность данных: /mnt/abi/settings/database.xml");
          qDebug() << "[Information] Подключение к БД... \n[Error] Ошибка подключения к БД. Пользователь: " + usr + ". Подключение к БД: " + dbname + " IP: "+ hostName;
       }

    if(table->model()->rowCount() == 0 && db.isOpen()) ///< Проверяем событие наличия таблицы Table_state и её пустоту.
    {
        QMessageBox::warning(0, "Отображение таблицы", "Таблица chk.Table_state либо пуста, либо не создана в БД " + dbname);
    }
}
